#include "voltron.h"
#include <drivers/ufat.h>
#include <strutil.h>

#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>


extern struct ufat uf;

extern struct ufat_device device;

struct PartitionEntry {
    uint8_t status;
    uint8_t chs_start[3];
    uint8_t type;
    uint8_t chs_end[3];
    uint32_t lba_start;  // Starting sector of the FAT32 partition
    uint32_t num_sectors;
} __attribute__((packed));


// Initialize the filesystem
bool init_filesystem() {
    return ufat_open(&uf, &device) == 0;
}

// Creates a directory at the specified path (if it doesn't exist)
bool create_directory(const char* path) {
    printf("create_directory: Attempting to create directory at path: %s\n", path);

    // Handle root directory case
    if (strcmp(path, "/") == 0 || strcmp(path, "") == 0) {
        printf("create_directory: Path is root or empty, no need to create\n");
        return true; // Root directory or empty path already exists or is invalid
    }

    char* path_copy = strdup(path);
    if (!path_copy) {
        printf("create_directory: Failed to allocate memory for path copy\n");
        return false;
    }

    // Trim trailing slashes
    size_t len = strlen(path_copy);
    while (len > 0 && path_copy[len - 1] == '/') {
        path_copy[--len] = '\0';
    }

    if (len == 0) {
        printf("create_directory: Path is empty after trimming slashes\n");
        free(path_copy);
        return false;
    }

    char* last_slash = strrchr(path_copy, '/');
    const char* name;
    struct ufat_directory parent_dir;

    if (!last_slash) { // Directory in root
        printf("create_directory: Creating directory in root\n");
        ufat_open_root(&uf, &parent_dir);
        name = path_copy;
    } else {
        *last_slash = '\0';
        name = last_slash + 1;
        
        if (strlen(name) == 0) {
            printf("create_directory: Directory name is empty after splitting path\n");
            free(path_copy);
            return false;
        }

        // Navigate to parent directory
        struct ufat_directory current_dir;
        ufat_open_root(&uf, &current_dir);
        const char* remaining = path_copy;

        while (remaining && *remaining) {
            struct ufat_dirent ent;
            const char* next_remaining;
            int ret = ufat_dir_find_path(&current_dir, remaining, &ent, &next_remaining);
            if (ret != UFAT_OK) {
                printf("create_directory: Failed to navigate: %s\n", remaining);
                free(path_copy);
                return false;
            }
            if (!(ent.attributes & UFAT_ATTR_DIRECTORY)) {
                printf("create_directory: Path component is not a directory: %s\n", remaining);
                free(path_copy);
                return false;
            }
            ret = ufat_open_subdir(&uf, &parent_dir, &ent);
            if (ret != UFAT_OK) {
                printf("create_directory: Failed to open subdirectory: %s\n", remaining);
                free(path_copy);
                return false;
            }
            remaining = next_remaining;
        }
    }

    // Create the directory entry
    struct ufat_dirent new_ent;
    int ret = ufat_dir_create(&parent_dir, &new_ent, name);
    free(path_copy);

    if (ret == UFAT_OK) {
        printf("create_directory: Successfully created directory: %s\n", name);
    } else if (ret == UFAT_ERR_FILE_EXISTS) {
        printf("create_directory: Directory already exists: %s\n", name);
    } else {
        printf("create_directory: Failed to create directory: %s, error: %d\n", name, ret);
    }

    return ret == UFAT_OK || ret == UFAT_ERR_FILE_EXISTS;
}

// Implementation of file creation
bool create_file_impl(const char* path) {
    printf("create_file_impl: Attempting to create file at path: %s\n", path);

    char* path_copy = strdup(path);
    if (!path_copy) {
        printf("create_file_impl: Failed to allocate memory for path copy\n");
        return false;
    }

    // Trim trailing slashes (files shouldn't have trailing slashes)
    size_t len = strlen(path_copy);
    while (len > 0 && path_copy[len - 1] == '/') {
        path_copy[--len] = '\0';
    }

    if (len == 0) {
        printf("create_file_impl: Path is empty after trimming slashes\n");
        free(path_copy);
        return false;
    }

    char* last_slash = strrchr(path_copy, '/');
    const char* name;
    struct ufat_directory parent_dir;

    if (!last_slash) {
        printf("create_file_impl: Creating file in root directory\n");
        ufat_open_root(&uf, &parent_dir);
        name = path_copy;
    } else {
        *last_slash = '\0';
        name = last_slash + 1;
        if (strlen(name) == 0) {
            printf("create_file_impl: Filename is empty after splitting path\n");
            free(path_copy);
            return false;
        }

        // Navigate to parent directory
        const char* parent_path = path_copy;

        // Check if parent_path is empty (root directory)
        if (strlen(parent_path) == 0) {
            printf("create_file_impl: Parent directory is root\n");
            ufat_open_root(&uf, &parent_dir);
        } else {
            struct ufat_directory current_dir;
            ufat_open_root(&uf, &current_dir);
            const char* remaining = parent_path;
            int ret;

            do {
                struct ufat_dirent ent;
                const char* next_remaining;
                ret = ufat_dir_find_path(&current_dir, remaining, &ent, &next_remaining);
                if (ret != UFAT_OK) {
                    printf("create_file_impl: Failed to find path component: %s\n", remaining);
                    free(path_copy);
                    return false;
                }

                if (!(ent.attributes & UFAT_ATTR_DIRECTORY)) {
                    printf("create_file_impl: Path component is not a directory: %s\n", remaining);
                    free(path_copy);
                    return false;
                }

                struct ufat_directory next_dir;
                ret = ufat_open_subdir(&uf, &next_dir, &ent);
                if (ret != UFAT_OK) {
                    printf("create_file_impl: Failed to open subdirectory: %s\n", remaining);
                    free(path_copy);
                    return false;
                }

                current_dir = next_dir;
                remaining = next_remaining;
            } while (remaining && *remaining);

            parent_dir = current_dir;
        }
    }

    // Create the file entry
    struct ufat_dirent new_ent;
    int ret = ufat_dir_mkfile(&parent_dir, &new_ent, name);
    free(path_copy);

    if (ret == UFAT_OK) {
        printf("create_file_impl: Successfully created file: %s\n", name);
    } else {
        printf("create_file_impl: Failed to create file: %s, error: %d\n", name, ret);
    }

    return ret == UFAT_OK;
}

// Creates a new file at the specified path
bool create_file(const char* path) {
    printf("create_file: Attempting to create file at path: %s\n", path);

    // Ensure the parent directory exists
    char* path_copy = strdup(path);
    if (!path_copy) {
        printf("create_file: Failed to allocate memory for path copy\n");
        return false;
    }

    // Extract the parent directory path
    char* last_slash = strrchr(path_copy, '/');
    if (last_slash) {
        *last_slash = '\0'; // Split into parent directory and filename
        const char* parent_path = path_copy;

        if (strlen(parent_path) == 0) {
            // Parent directory is root, no need to create
            printf("create_file: Parent directory is root, no need to create\n");
        } else {
            if (!create_directory(parent_path)) {
                printf("create_file: Failed to ensure parent directory exists: %s\n", parent_path);
                free(path_copy);
                return false;
            }
        }
    }

    free(path_copy);
    return create_file_impl(path); // Call the implementation
}

bool open_directory(const char* path) {
    struct ufat_directory dir;
    struct ufat_dirent ent;
    const char* remaining;
    ufat_open_root(&uf, &dir);

    int ret = ufat_dir_find_path(&dir, path, &ent, &remaining);
    if (ret != UFAT_OK || (remaining && *remaining))
        return false;

    if (!(ent.attributes & UFAT_ATTR_DIRECTORY))
        return false;

    struct ufat_directory subdir;
    ret = ufat_open_subdir(&uf, &subdir, &ent);
    return ret == UFAT_OK;
}

bool read_file(const char* path, void* buffer, uint32_t size) {
    struct ufat_directory dir;
    struct ufat_dirent ent;
    const char* remaining;
    ufat_open_root(&uf, &dir);

    int ret = ufat_dir_find_path(&dir, path, &ent, &remaining);
    if (ret != UFAT_OK || (remaining && *remaining))
        return false;

    if (ent.attributes & UFAT_ATTR_DIRECTORY)
        return false;

    struct ufat_file file;
    ret = ufat_open_file(&uf, &file, &ent);
    if (ret != UFAT_OK)
        return false;

    int bytes_read = ufat_file_read(&file, buffer, size);
    return bytes_read >= 0;
}

// Writes data to an existing file (overwrites contents)
bool write_file(const char* path, const void* data, uint32_t size) {
    printf("write_file: Attempting to write to file: %s\n", path);

    // Validate input
    if (!path || !data || size == 0) {
        printf("write_file: Invalid input parameters\n");
        return false;
    }

    struct ufat_directory dir;
    struct ufat_dirent ent;
    const char* remaining;
    
    // Start at root directory
    ufat_open_root(&uf, &dir);

    // Find the file entry
    int ret = ufat_dir_find_path(&dir, path, &ent, &remaining);
    if (ret != UFAT_OK) {
        printf("write_file: Failed to find file: %s\n", path);
        return false;
    }

    // Verify it's a file
    if (ent.attributes & UFAT_ATTR_DIRECTORY) {
        printf("write_file: Path is a directory, not a file: %s\n", path);
        return false;
    }

    // Open the file
    struct ufat_file file;
    ret = ufat_open_file(&uf, &file, &ent);
    if (ret != UFAT_OK) {
        printf("write_file: Failed to open file: %s\n", path);
        return false;
    }

    // Clear existing content
    ret = ufat_file_truncate(&file);
    if (ret != UFAT_OK) {
        printf("write_file: Failed to truncate file: %s\n", path);
        return false;
    }

    // Write new data
    int bytes_written = ufat_file_write(&file, data, size);
    if (bytes_written == size) {
        printf("write_file: Successfully wrote %d bytes to file: %s\n", bytes_written, path);
        return true;
    } else {
        printf("write_file: Failed to write data to file: %s (expected %d bytes, wrote %d)\n", path, size, bytes_written);
        return false;
    }
}

// Deletes a file at the specified path
bool delete_file(const char* path) {
    printf("delete_file: Attempting to delete file: %s\n", path);

    struct ufat_directory dir;
    struct ufat_dirent ent;
    const char* remaining;
    
    // Start at root directory
    ufat_open_root(&uf, &dir);

    // Find the file entry
    int ret = ufat_dir_find_path(&dir, path, &ent, &remaining);
    if (ret != UFAT_OK) {
        printf("delete_file: Failed to find file: %s\n", path);
        return false;
    }

    // Verify it's a file
    if (ent.attributes & UFAT_ATTR_DIRECTORY) {
        printf("delete_file: Path is a directory, not a file: %s\n", path);
        return false;
    }

    // Delete the file entry
    ret = ufat_dir_delete(&uf, &ent);
    if (ret == UFAT_OK) {
        printf("delete_file: Successfully deleted file: %s\n", path);
    } else {
        printf("delete_file: Failed to delete file: %s\n", path);
    }

    return ret == UFAT_OK;
}

